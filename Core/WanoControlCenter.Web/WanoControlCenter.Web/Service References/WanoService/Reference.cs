//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WanoControlCenter.Web.WanoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestRegisterCard", Namespace="http://schemas.datacontract.org/2004/07/WanoControlContracts.DataContracts.Regist" +
        "erCard")]
    [System.SerializableAttribute()]
    public partial class RequestRegisterCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((this.PasswordField.Equals(value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PermissionsField, value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseRegisterCard", Namespace="http://schemas.datacontract.org/2004/07/WanoControlContracts.DataContracts.Regist" +
        "erCard")]
    [System.SerializableAttribute()]
    public partial class ResponseRegisterCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RegisteredField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Registered {
            get {
                return this.RegisteredField;
            }
            set {
                if ((this.RegisteredField.Equals(value) != true)) {
                    this.RegisteredField = value;
                    this.RaisePropertyChanged("Registered");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/WCCCommon.Models")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blank = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Set = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Clear = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestControllerConfigure", Namespace="http://schemas.datacontract.org/2004/07/WanoControlContracts.DataContracts.Contro" +
        "llerConfigure")]
    [System.SerializableAttribute()]
    public partial class RequestControllerConfigure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress GatewayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HolidayControlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress MaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PcIPAddrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SNField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Gateway {
            get {
                return this.GatewayField;
            }
            set {
                if ((object.ReferenceEquals(this.GatewayField, value) != true)) {
                    this.GatewayField = value;
                    this.RaisePropertyChanged("Gateway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HolidayControl {
            get {
                return this.HolidayControlField;
            }
            set {
                if ((this.HolidayControlField.Equals(value) != true)) {
                    this.HolidayControlField = value;
                    this.RaisePropertyChanged("HolidayControl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Mask {
            get {
                return this.MaskField;
            }
            set {
                if ((object.ReferenceEquals(this.MaskField, value) != true)) {
                    this.MaskField = value;
                    this.RaisePropertyChanged("Mask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PcIPAddr {
            get {
                return this.PcIPAddrField;
            }
            set {
                if ((object.ReferenceEquals(this.PcIPAddrField, value) != true)) {
                    this.PcIPAddrField = value;
                    this.RaisePropertyChanged("PcIPAddr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SN {
            get {
                return this.SNField;
            }
            set {
                if ((this.SNField.Equals(value) != true)) {
                    this.SNField = value;
                    this.RaisePropertyChanged("SN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseControllerConfigure", Namespace="http://schemas.datacontract.org/2004/07/WanoControlContracts.DataContracts.Contro" +
        "llerConfigure")]
    [System.SerializableAttribute()]
    public partial class ResponseControllerConfigure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress GatewayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HolidayControlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress MaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PcIPAddrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SNField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Gateway {
            get {
                return this.GatewayField;
            }
            set {
                if ((object.ReferenceEquals(this.GatewayField, value) != true)) {
                    this.GatewayField = value;
                    this.RaisePropertyChanged("Gateway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HolidayControl {
            get {
                return this.HolidayControlField;
            }
            set {
                if ((this.HolidayControlField.Equals(value) != true)) {
                    this.HolidayControlField = value;
                    this.RaisePropertyChanged("HolidayControl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Mask {
            get {
                return this.MaskField;
            }
            set {
                if ((object.ReferenceEquals(this.MaskField, value) != true)) {
                    this.MaskField = value;
                    this.RaisePropertyChanged("Mask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PcIPAddr {
            get {
                return this.PcIPAddrField;
            }
            set {
                if ((object.ReferenceEquals(this.PcIPAddrField, value) != true)) {
                    this.PcIPAddrField = value;
                    this.RaisePropertyChanged("PcIPAddr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SN {
            get {
                return this.SNField;
            }
            set {
                if ((this.SNField.Equals(value) != true)) {
                    this.SNField = value;
                    this.RaisePropertyChanged("SN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WanoService.IWanoService")]
    public interface IWanoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/RegisterCard", ReplyAction="http://tempuri.org/IRegisterCard/RegisterCardResponse")]
        WanoControlCenter.Web.WanoService.ResponseRegisterCard RegisterCard(WanoControlCenter.Web.WanoService.RequestRegisterCard card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/RegisterCard", ReplyAction="http://tempuri.org/IRegisterCard/RegisterCardResponse")]
        System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.ResponseRegisterCard> RegisterCardAsync(WanoControlCenter.Web.WanoService.RequestRegisterCard card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/SetExpiredDateForCard", ReplyAction="http://tempuri.org/IRegisterCard/SetExpiredDateForCardResponse")]
        bool SetExpiredDateForCard(int cardId, System.DateTime expiredDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/SetExpiredDateForCard", ReplyAction="http://tempuri.org/IRegisterCard/SetExpiredDateForCardResponse")]
        System.Threading.Tasks.Task<bool> SetExpiredDateForCardAsync(int cardId, System.DateTime expiredDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/GetCards", ReplyAction="http://tempuri.org/IRegisterCard/GetCardsResponse")]
        WanoControlCenter.Web.WanoService.RequestRegisterCard[] GetCards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/GetCards", ReplyAction="http://tempuri.org/IRegisterCard/GetCardsResponse")]
        System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.RequestRegisterCard[]> GetCardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/UpdateCardsPermissions", ReplyAction="http://tempuri.org/IRegisterCard/UpdateCardsPermissionsResponse")]
        bool UpdateCardsPermissions(WanoControlCenter.Web.WanoService.Status[][] Permissions, int cardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterCard/UpdateCardsPermissions", ReplyAction="http://tempuri.org/IRegisterCard/UpdateCardsPermissionsResponse")]
        System.Threading.Tasks.Task<bool> UpdateCardsPermissionsAsync(WanoControlCenter.Web.WanoService.Status[][] Permissions, int cardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerConfigure/ConnectToController", ReplyAction="http://tempuri.org/IControllerConfigure/ConnectToControllerResponse")]
        bool ConnectToController(WanoControlCenter.Web.WanoService.RequestControllerConfigure controller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerConfigure/ConnectToController", ReplyAction="http://tempuri.org/IControllerConfigure/ConnectToControllerResponse")]
        System.Threading.Tasks.Task<bool> ConnectToControllerAsync(WanoControlCenter.Web.WanoService.RequestControllerConfigure controller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerConfigure/GetController", ReplyAction="http://tempuri.org/IControllerConfigure/GetControllerResponse")]
        WanoControlCenter.Web.WanoService.ResponseControllerConfigure GetController();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControllerConfigure/GetController", ReplyAction="http://tempuri.org/IControllerConfigure/GetControllerResponse")]
        System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.ResponseControllerConfigure> GetControllerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWanoServiceChannel : WanoControlCenter.Web.WanoService.IWanoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WanoServiceClient : System.ServiceModel.ClientBase<WanoControlCenter.Web.WanoService.IWanoService>, WanoControlCenter.Web.WanoService.IWanoService {
        
        public WanoServiceClient() {
        }
        
        public WanoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WanoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WanoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WanoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WanoControlCenter.Web.WanoService.ResponseRegisterCard RegisterCard(WanoControlCenter.Web.WanoService.RequestRegisterCard card) {
            return base.Channel.RegisterCard(card);
        }
        
        public System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.ResponseRegisterCard> RegisterCardAsync(WanoControlCenter.Web.WanoService.RequestRegisterCard card) {
            return base.Channel.RegisterCardAsync(card);
        }
        
        public bool SetExpiredDateForCard(int cardId, System.DateTime expiredDate) {
            return base.Channel.SetExpiredDateForCard(cardId, expiredDate);
        }
        
        public System.Threading.Tasks.Task<bool> SetExpiredDateForCardAsync(int cardId, System.DateTime expiredDate) {
            return base.Channel.SetExpiredDateForCardAsync(cardId, expiredDate);
        }
        
        public WanoControlCenter.Web.WanoService.RequestRegisterCard[] GetCards() {
            return base.Channel.GetCards();
        }
        
        public System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.RequestRegisterCard[]> GetCardsAsync() {
            return base.Channel.GetCardsAsync();
        }
        
        public bool UpdateCardsPermissions(WanoControlCenter.Web.WanoService.Status[][] Permissions, int cardId) {
            return base.Channel.UpdateCardsPermissions(Permissions, cardId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCardsPermissionsAsync(WanoControlCenter.Web.WanoService.Status[][] Permissions, int cardId) {
            return base.Channel.UpdateCardsPermissionsAsync(Permissions, cardId);
        }
        
        public bool ConnectToController(WanoControlCenter.Web.WanoService.RequestControllerConfigure controller) {
            return base.Channel.ConnectToController(controller);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectToControllerAsync(WanoControlCenter.Web.WanoService.RequestControllerConfigure controller) {
            return base.Channel.ConnectToControllerAsync(controller);
        }
        
        public WanoControlCenter.Web.WanoService.ResponseControllerConfigure GetController() {
            return base.Channel.GetController();
        }
        
        public System.Threading.Tasks.Task<WanoControlCenter.Web.WanoService.ResponseControllerConfigure> GetControllerAsync() {
            return base.Channel.GetControllerAsync();
        }
    }
}
